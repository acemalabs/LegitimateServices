pragma solidity 0.4.24;

contract LegitimateServices{
  address  DTI = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;
  string[] industries = ["Airlines","Hotel","Hospital"];

  struct Register {
     uint businessNumber;
     string companyName;
     string industry;
     bool status;
  }

  modifier onlyOwner() { 
      require(msg.sender == DTI, "Not authorized.");  
      _; 
  }
  modifier validValue{
      msg.value == 1 ether;
      _;
  }

  mapping(uint => Register) registers;
  uint id;
  
  function CreateRegistration(uint _businessNumber,string _companyName, uint _industry)onlyOwner validValue public payable {
      Register memory newRegister;
      newRegister.businessNumber = _businessNumber;
      newRegister.companyName = _companyName;
      newRegister.industry = industries[_industry];
      registers[id] = newRegister;
      newRegister.status = false;
      DTI.transfer(1 ether);
      id++;
  }
  
  function getInfoRegistration(uint _id) public view returns (uint,string, string,bool) {
      return (registers[_id].businessNumber,registers[_id].companyName,registers[_id].industry,registers[_id].status);
  }
  function verifyCompany(uint _id) onlyOwner public {
      registers[_id].status = true;
  }
  
}